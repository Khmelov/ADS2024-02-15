package by.it.group351001.sosnovski.lesson13;

import java.util.*;

public class GraphA {

    /**
     –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞.
     –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è –≤–µ—Ä—à–∏–Ω –≤ –≥—Ä–∞—Ñ–µ,
     –≥–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±—Ä–∞ –∏–∑ –≤–µ—Ä—à–∏–Ω—ã ùë¢ –≤ –≤–µ—Ä—à–∏–Ω—É ùë£ –≤–µ—Ä—à–∏–Ω–∞ ùë¢ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç ùë£.

     –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã:

     –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞: –°—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤–µ—Ä—à–∏–Ω—ã –∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
     –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ê–ª–≥–æ—Ä–∏—Ç–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—Ö–æ–¥ –≤ –≥–ª—É–±–∏–Ω—É (DFS) –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∞.
     –£–∑–ª—ã —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —Ç–∞–∫, —á—Ç–æ–±—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞ –ø–æ—è–≤–ª—è–ª–∞—Å—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π.
     –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: –ù–∞–ø–µ—á–∞—Ç–∞–Ω –ø–æ—Ä—è–¥–æ–∫ –≤–µ—Ä—à–∏–Ω –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
     */



    // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DFS –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–∑–ª–æ–≤ –≤ —Å—Ç–µ–∫
    static void topologicalSortUnit(String node, Map<String, ArrayList<String>> graph, Set<String> visited, Stack<String> stack) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—à–∏–Ω—É –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö
        visited.add(node);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å–µ–¥–µ–π —É —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—à–∏–Ω—ã
        if (graph.get(node) != null) {
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å–µ–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ topologicalSortUnit, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ—Å–µ—â–µ–Ω
            for (String nextNode : graph.get(node)) {
                if (!visited.contains(nextNode)) {
                    topologicalSortUnit(nextNode, graph, visited, stack);
                }
            }
        }
        // –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—à–∏–Ω—É –≤ —Å—Ç–µ–∫
        stack.push(node);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∞
    static void topologicalSort(Map<String, ArrayList<String>> graph) {
        // –°—Ç–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        Stack<String> stack = new Stack<>();
        // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω
        Set<String> visited = new HashSet<>();

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–µ–π –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        for (ArrayList<String> array : graph.values()) {
            array.sort(Comparator.reverseOrder());
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º DFS –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã –≥—Ä–∞—Ñ–∞
        for (String node : graph.keySet()) {
            if (!visited.contains(node)) {
                topologicalSortUnit(node, graph, visited, stack);
            }
        }

        // –í—ã–≤–æ–¥–∏–º –≤–µ—Ä—à–∏–Ω—ã –∏–∑ —Å—Ç–µ–∫–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
        while (!stack.isEmpty()) {
            System.out.print(stack.pop() + " ");
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–≤–æ–¥–∞ –≥—Ä–∞—Ñ–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
    private static void getGraph(Map<String, ArrayList<String>> graph) {
        Scanner in = new Scanner(System.in);

        boolean isEnd = false; // –§–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–≤–æ–¥–∞
        while (!isEnd) {
            // –°—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥—è—â—É—é –≤–µ—Ä—à–∏–Ω—É
            String vertexOut = in.next();
            if (!graph.containsKey(vertexOut)) {
                graph.put(vertexOut, new ArrayList<>()); // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –≥—Ä–∞—Ñ–µ
            }
            // –°—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–±—Ä–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ)
            String edge = in.next();
            // –°—á–∏—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â—É—é –≤–µ—Ä—à–∏–Ω—É
            String vertexIn = in.next();
            // –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—É—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤–≤–æ–¥–∞
            if (vertexIn.charAt(vertexIn.length() - 1) == ',') {
                vertexIn = vertexIn.substring(0, vertexIn.length() - 1);
            } else {
                isEnd = true; // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—è—Ç–æ–π, –∑–Ω–∞—á–∏—Ç –≤–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ö–æ–¥—è—â—É—é –≤–µ—Ä—à–∏–Ω—É –≤ —Å–ø–∏—Å–æ–∫ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥—è—â–µ–π –≤–µ—Ä—à–∏–Ω—ã
            graph.get(vertexOut).add(vertexIn);
        }
    }

    public static void main(String[] args) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–º–µ–∂–Ω–æ—Å—Ç–∏
        Map<String, ArrayList<String>> graph = new HashMap<>();
        // –°—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞—Ñ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
        getGraph(graph);
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        topologicalSort(graph);
    }
}
